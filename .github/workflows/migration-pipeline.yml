name: Azure VM Migration Pipeline

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'VM to migrate'
        required: true
        type: string
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - vmware
          - hyper-v
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - prod
          - staging
        default: 'prod'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/**'

env:
  # Mock environment variables for testing
  ARM_CLIENT_ID: "00000000-0000-0000-0000-000000000000"
  ARM_CLIENT_SECRET: "mock-client-secret"
  ARM_SUBSCRIPTION_ID: "00000000-0000-0000-0000-000000000000"
  ARM_TENANT_ID: "00000000-0000-0000-0000-000000000000"
  AZURE_MIGRATE_PROJECT: "mock-migrate-project"
  AZURE_RESOURCE_GROUP: "mock-resource-group"
  AZURE_BACKUP_VAULT: "mock-backup-vault"
  TF_IN_AUTOMATION: "true"

jobs:
  validate:
    name: Validate Configurations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]==7.0.0
          pip install pywinrm
          ansible-galaxy collection install azure.azcollection

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Ansible Lint
        uses: ansible/ansible-lint-action@v6
        with:
          path: "ansible/"

  provision-infrastructure:
    needs: validate
    name: Provision Azure Infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file=terraform.tfvars -out=tfplan
        
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  prepare-migration:
    needs: provision-infrastructure
    name: Prepare VM Migration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Ansible Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]==7.0.0
          pip install pywinrm
          ansible-galaxy collection install azure.azcollection
          
      - name: Run Pre-Migration Tasks
        run: |
          cd ansible
          ansible-playbook playbooks/migrate_vm.yml \
            -e "vm_name=${{ github.event.inputs.vm_name }}" \
            -e "source_environment=${{ github.event.inputs.source_environment }}" \
            -e "target_environment=${{ github.event.inputs.target_environment }}"

  execute-migration:
    needs: prepare-migration
    name: Execute VM Migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Ansible Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]==7.0.0
          ansible-galaxy collection install azure.azcollection
          
      - name: Execute Migration
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbooks/migrate_vm.yml \
            -e "vm_name=${{ github.event.inputs.vm_name }}" \
            -e "role=azure_migrate"

  post-migration:
    needs: execute-migration
    name: Post-Migration Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Ansible Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]==7.0.0
          ansible-galaxy collection install azure.azcollection
          
      - name: Configure VM and Enable Monitoring
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbooks/post_migration.yml \
            -e "vm_name=${{ github.event.inputs.vm_name }}" \
            -e "role=vm_config"

  cutover:
    needs: post-migration
    name: Execute Cutover
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Ansible Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]==7.0.0
          ansible-galaxy collection install azure.azcollection
          
      - name: Execute Cutover Tasks
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbooks/cutover.yml \
            -e "vm_name=${{ github.event.inputs.vm_name }}" \
            -e "role=cutover_tasks"

  verify:
    needs: cutover
    name: Verify Migration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Ansible Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]==7.0.0
          ansible-galaxy collection install azure.azcollection
          
      - name: Verify Migration
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbooks/verify.yml \
            -e "vm_name=${{ github.event.inputs.vm_name }}"
            
      - name: Generate Migration Report
        run: |
          cd ansible
          ansible-playbook playbooks/generate_report.yml \
            -e "vm_name=${{ github.event.inputs.vm_name }}"
        
      - name: Upload Migration Report
        uses: actions/upload-artifact@v3
        with:
          name: migration-report
          path: ansible/reports/