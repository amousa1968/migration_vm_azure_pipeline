name: VM Migration Pipeline

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'VM to migrate'
        required: true
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/**'

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_MIGRATE_PROJECT: ${{ secrets.AZURE_MIGRATE_PROJECT }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file=terraform.tfvars -out=tfplan
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  migrate-vm:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible[azure]
          ansible-galaxy collection install azure.azcollection
          
      - name: Run VM Migration
        run: |
          cd ansible
          ansible-playbook playbooks/migrate_vm.yml -e "vm_name=${{ github.event.inputs.vm_name }}"
          
      - name: Configure Post-Migration
        run: |
          cd ansible
          ansible-playbook playbooks/post_migration.yml