name: Azure VM Migration Pipeline

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'VM to migrate'
        required: true
        type: string
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - vmware
          - hyper-v
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - prod
          - staging
        default: 'prod'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/**'

env:
  # Mock environment variables for testing
  ARM_CLIENT_ID: "00000000-0000-0000-0000-000000000000"
  ARM_CLIENT_SECRET: "mock-client-secret"
  ARM_SUBSCRIPTION_ID: "00000000-0000-0000-0000-000000000000"
  ARM_TENANT_ID: "00000000-0000-0000-0000-000000000000"
  AZURE_MIGRATE_PROJECT: "mock-migrate-project"
  AZURE_RESOURCE_GROUP: "mock-resource-group"
  AZURE_BACKUP_VAULT: "mock-backup-vault"
  TF_IN_AUTOMATION: "true"
  ANSIBLE_COLLECTIONS_PATH: "~/.ansible/collections"

jobs:
  validate:
    name: Validate Configurations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Ansible and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==7.0.0
          pip install "ansible-lint>=6.22.2,<7.0.0"
          pip install "azure-cli-core>=2.40.0"
          
      - name: Install and Verify Ansible Collection
        run: |
          rm -rf ~/.ansible/collections/ansible_collections/azure
          ansible-galaxy collection install azure.azcollection:1.14.0 --force
          echo "Verifying installed modules:"
          ansible-galaxy collection list azure.azcollection
          echo "Available Azure modules:"
          ansible-doc -l | grep -i "azure\.azcollection\."

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Run Ansible Lint (capture output)
        run: |
          mkdir -p artifacts
          cd ansible
          ANSIBLE_COLLECTIONS_PATH=~/.ansible/collections ansible-lint -v > ../artifacts/ansible-lint.txt 2>&1 || true

      - name: Upload ansible-lint output
        uses: actions/upload-artifact@v4
        with:
          name: ansible-lint-output
          path: artifacts/ansible-lint.txt

  provision-infrastructure:
    needs: validate
    name: Provision Azure Infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"
        
      - name: Terraform Init & Validate
        run: |
          cd terraform
          echo "Checking for experimental 'optional(' usages in terraform files"
          grep -nR "optional(" || true
          terraform init
          terraform validate
          
      - name: Terraform Plan
        run: |
          cd terraform
          if [ "${{ env.CI_MOCK }}" = "true" ]; then
            echo "CI_MOCK=true: generating mock tfplan placeholder (skipping real plan to avoid provider auth)"
            mkdir -p ../artifacts
            echo "MOCK_PLAN" > tfplan
            cp tfplan ../artifacts/tfplan.mock
          else
            terraform plan -var-file=terraform.tfvars -out=tfplan
          fi
        
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan